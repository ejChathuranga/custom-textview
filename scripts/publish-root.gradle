// Create variables with empty default values
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''


File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
// Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
// Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
}

//def pgpKeyContent = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
//if (pgpKeyContent != null) {
//    def tmpDir = new File("$rootProject.projectDir/scripts")
//    mkdir tmpDir
//    def keyFile = new File("$tmpDir/ctvprivate.pgp")
//    keyFile.createNewFile()
//    def os = keyFile.newDataOutputStream()
//    os.write(pgpKeyContent.decodeBase64())
//    os.close()
//
//    ext['signing.secretKeyRingFile'] = keyFile.absolutePath
//}

// Set up Sonatype repository
Properties properties= new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = properties.getProperty('sonatypeStagingProfileId')
            username =  properties.getProperty('ossrhUsername')
            password =  properties.getProperty('ossrhPassword')

            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

        }
    }
}